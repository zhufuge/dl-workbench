const data = `<div class="mume markdown-preview">
<p>核心业务层，顾名思义，就是本系统最核心的部分。</p>
<p>为了快捷开发和模块化开发，该层的搭建选择了目前在人工智能开发工作中最受欢迎的编程语言——Python语言。</p>
<p>Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。Python在人工智能和数据科学方面的开发生态十分成熟，有很多非常有用的库可以使用，例如著名的NumPy，SciPy等。而在深度学习方面，则有Keras、TensorFlow和Theano等库。由于开发环境和个人喜好等原因，该系统选择了使用Keras作为模型搭建的前端，并以TensorFlow作为模型的后端。</p>
<p>Keras是一个高层神经网络API，Keras由纯Python编写而成并基Tensorflow、Theano以及CNTK后端。Keras 为支持快速实验而生，能够把你的想法迅速转换为结果。keras具有高度模块化，极简，和可扩充特性，支持CNN和RNN，或二者的结合，而且可以无缝CPU和GPU切换。</p>
<p>根据章节3.2中搭建的深度学习模型结构，我们可以轻易地使用Keras来实现。我们的模型结构并不复杂，是多个网络层的线性堆叠，因此可以使用序贯（Sequential）模型来搭建。</p>
<p>使用Keras搭建一个模型的过程大致如下。</p>
<ol>
<li>用Sequential对象初始化一个模型；</li>
<li>用模型的add方法将每个层按顺序从头到尾地添加到模型中；</li>
<li>通过compile方法来对学习过程进行配置，即编译；</li>
<li>使用fit方法训练模型。</li>
</ol>
<p>由于Keras的层类很丰富，基本上神经网络里的各种层都能找到对应的类。每个层都是用相应的类初始化的，并且每个类会有对应的参数用于设置该层的权值和形状等超参数。最后要将这些层通过模型的add方法添加到模型当中。</p>
<p>编译设置，接收三个参数，优化器、损失函数和指标列表。优化器可指定为已预定义的优化器名，如rmsprop、adagrad，或一个Optimizer类的对象；损失函数为模型试图最小化的目标函数，它可为预定义的损失函数名，如categorical_crossentropy、mse，也可以为一个损失函数。指标可以是一个预定义指标的名字,也可以是一个用户定制的函数。</p>
<p>训练模型，我们需要将训练数据、数据的标记和训练轮数等作为参数传入模型的fit方法进行训练。最后我们将会得到了一个训练好的模型。</p>
<p>为了评估模型，需要使用evaluate方法传入训练数据进行评估。</p>
<p>通过不断地搭建模型、训练和评估后，选择一个效果最好的模型进行保存。使用to_json方法得到序列化成为JSON字符串的模型，并保存为JSON格式的数据文件。对于训练好的模型的权值，则是使用save_weights方法保存为h5格式的数据文件。</p>
<p>最后需要写一个主程序，使得服务器代码可以用以执行得到结果。该主进程会先从JSON数据文件读取模型，接着读取训练好的模型参数，最后对新的样本数据进行分类并返回分类结果给调用该进程的程序。</p>
</div>`

export default data